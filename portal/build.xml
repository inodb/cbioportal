<?xml version="1.0"?>
<!--
	Ant Build Script.
	Author:  Ethan Cerami
-->
<project name="Portal" default="compile" basedir=".">

  <!--  Environment Variables -->
  <property environment="env" />

  <!--  Set CGDS Home -->
  <property name="cgds.home" value="${env.CGDS_HOME}" />

  <!-- The build directory -->
  <!-- All files generated by ant go here -->
  <property name="build.dir" value="${basedir}/build" />

  <!-- The war build directory -->
  <!-- All generated war files go here -->
  <property name="war.dir" value="${build.dir}/war" />

  <!-- The distribution directory -->
  <!-- All generated jar files go here -->
  <property name="dist.dir" value="${basedir}/dist" />

  <!-- The java source directory-->
  <property name="src.dir" value="${basedir}/src" />

  <!-- The web source directory -->
  <property name="web.dir" value="${basedir}/web" />

  <!-- The lib directory -->
  <!-- Contains all third-party JAR files, required for compilation -->
  <property name="lib.dir" value="lib" />

  <!-- The Spring lib directory -->
  <!-- Contains all third-party JAR files, required for compilation -->
  <property name="spring.lib.dir" value="${lib.dir}/spring" />

  <!-- The config directory-->
  <property name="config.dir" value="config" />

  <!-- The bin directory-->
  <property name="bin.dir" value="${basedir}/bin" />

  <!--  Build.properties File -->
  <property file="build.properties" />

  <!-- Servlet Container Properties -->
  <property name="app.path" value="/${app.name}" />
  <property name="manager.url" value="http://localhost:8080/manager" />

  <!-- junit dir -->
  <property name="junit.dir" value="${build.dir}/junit" />

  <!-- ============= Custom Ant Task Definitions ======================= -->
  <taskdef name="install" classname="org.apache.catalina.ant.InstallTask" classpath="lib/ant/catalina-ant.jar" />
  <taskdef name="list" classname="org.apache.catalina.ant.ListTask" classpath="lib/ant/catalina-ant.jar" />
  <taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask" classpath="lib/ant/catalina-ant.jar" />
  <taskdef name="remove" classname="org.apache.catalina.ant.RemoveTask" classpath="lib/ant/catalina-ant.jar" />
  <taskdef resource="checkstyletask.properties" classpath="lib/ant/checkstyle-5.4-all.jar" />
  <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpath="lib/ant/ant-contrib-1.0b3.jar" />

  <!--  ============ Compilation Control Options ======================= -->
  <property name="compile.debug" value="true" />
  <property name="compile.deprecation" value="false" />
  <property name="compile.optimize" value="true" />

  <!-- ==================== Compilation Classpath ====================== -->
  <path id="compile.classpath">
    <pathelement path="${build.dir}/WEB-INF/classes" />
    <fileset dir="${lib.dir}">
      <include name="*.jar" />
    </fileset>
    <fileset dir="${spring.lib.dir}">
      <include name="*.jar" />
    </fileset>
  </path>

  <!-- ==================== Clean Target =============================== -->
  <target name="clean" description="Deletes all build files and starts fresh.">
    <delete dir="${build.dir}" />
    <delete dir="${dist.dir}" />
  </target>

  <!-- ==================== Compile Target ==============================-->
  <target name="compile" depends="prepare" description="Compile all Java source files.">
    <mkdir dir="${build.dir}/WEB-INF/classes" />
    <javac srcdir="${src.dir}" destdir="${build.dir}/WEB-INF/classes" debug="${compile.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}">
      <classpath refid="compile.classpath" />
    </javac>

    <!-- Copy application resources -->
    <copy todir="${build.dir}/WEB-INF/classes">
      <fileset dir="${src.dir}" excludes="**/*.java" />
    </copy>

    <!-- Copy over all third-party libs -->
    <!-- Exclude servlet.jar See Servlet Spec 2.3, section 9.7.2 -->
    <copy todir="${build.dir}/WEB-INF/lib">
      <fileset dir="${lib.dir}">
        <include name="*.jar" />
        <exclude name="servlet.jar" />
      </fileset>
      <fileset dir="${spring.lib.dir}">
        <include name="*.jar" />
      </fileset>
    </copy>
  </target>

  <!-- ==================== Jar Target ================================== -->
  <target name="jar" depends="compile" description="Creates binary JAR distribution.">
    <delete dir="${dist.dir}" />
    <mkdir dir="${dist.dir}" />
    <jar jarfile="${dist.dir}/portal.jar" basedir="${build.dir}/WEB-INF/classes/" />
  </target>

  <!-- ==================== War Target ================================== -->
  <target name="war" depends="compile" description="Creates binary WAR distribution.">
    <mkdir dir="${war.dir}" />
    <jar jarfile="${war.dir}/${app.name}.war" basedir="${build.dir}" />
  </target>

  <!-- ==================== Install Target =============================== -->
  <!--

      The "install" target tells the specified Tomcat installation to dynamically
      install this web application and make it available for execution.  It does
      *not* cause the existence of this web application to be remembered across
      Tomcat restarts; if you restart the server, you will need to re-install all
      this web application.

      If you have already installed this application, and simply want Tomcat to
      recognize that you have updated Java classes (or the web.xml file), use the
      "reload" target instead.

      NOTE:  This target will only succeed if it is run from the same server that
      Tomcat is running on.

      NOTE:  This is the logical opposite of the "remove" target.

    -->
  <target name="install" depends="prepare, compile" description="Installs application to local development servlet container.">
    <install url="${manager.url}" username="${manager.username}" password="${manager.password}" path="${app.path}" war="file://${build.dir}" />
  </target>

  <!-- ====================== List Target ================================ -->
  <!--

      The "list" target asks the specified Tomcat 4 installation to list the
      currently running web applications, either loaded at startup time or
      installed dynamically.  It is useful to determine whether or not the
      application you are currently developing has been installed.

    -->
  <target name="list" description="Lists installed applications on servlet container">
    <list url="${manager.url}" username="${manager.username}" password="${manager.password}" />
  </target>


  <!-- ==================== Prepare Target ============================== -->
  <!--

      The "prepare" target is used to create the "build" destination directory,
      and copy the static contents of your web application to it.  If you need
      to copy static files from external dependencies, you can customize the
      contents of this task.

      Normally, this task is executed indirectly when needed.

    -->
  <target name="prepare">

    <!-- Create build directories as needed -->
    <mkdir dir="${build.dir}" />
    <mkdir dir="${build.dir}/WEB-INF" />
    <mkdir dir="${build.dir}/WEB-INF/classes" />
    <mkdir dir="${build.dir}/META-INF" />
    <mkdir dir="${junit.dir}" />
    <mkdir dir="${junit.dir}/classes" />
    <mkdir dir="${junit.dir}/reports" />

    <!-- Copy static content of this web application -->
    <copy todir="${build.dir}">
      <fileset dir="${web.dir}" excludes="**/*.xml" />
    </copy>

    <!-- Copy external dependencies as required -->
    <mkdir dir="${build.dir}/WEB-INF/lib" />

    <!-- Force copy of web.xml -->
    <if>
      <equals arg1="${authenticate}" arg2="true" />
      <then>
        <copy overwrite="yes" tofile="${build.dir}/WEB-INF/web.xml" file="${web.dir}/WEB-INF/web-security.xml" />
        <copy overwrite="yes" todir="${build.dir}/WEB-INF/classes" file="${web.dir}/WEB-INF/applicationContext-security.xml" />
        <copy overwrite="yes" todir="${build.dir}/META-INF" file="${web.dir}/WEB-INF/context.xml" />
      </then>
      <elseif>
        <equals arg1="${authenticate}" arg2="false" />
        <then>
          <copy overwrite="yes" todir="${build.dir}/WEB-INF" file="${web.dir}/WEB-INF/web.xml" />
          <copy overwrite="yes" tofile="${build.dir}/WEB-INF/classes/applicationContext-security.xml" file="${web.dir}/WEB-INF/applicationContext-security-disabled.xml" />
        </then>
      </elseif>
    </if>

    <!-- Prepare applicationContext-security.xml, based on build.properties -->
    <if>
      <equals arg1="${authenticate}" arg2="true" />
      <then>
        <replace file="${build.dir}/WEB-INF/classes/applicationContext-security.xml" token="db_host_value" value="${db.host}" />
        <replace file="${build.dir}/WEB-INF/classes/applicationContext-security.xml" token="db_name_value" value="${db.name}" />
        <replace file="${build.dir}/WEB-INF/classes/applicationContext-security.xml" token="db_user_value" value="${db.user}" />
        <replace file="${build.dir}/WEB-INF/classes/applicationContext-security.xml" token="db_password_value" value="${db.password}" />
      </then>
    </if>

    <!-- Prepare web.xml, based on build.properties -->
    <replace file="${build.dir}/WEB-INF/web.xml" token="pathway_commons_url_value" value="${pathway_commons.url}" />
    <replace file="${build.dir}/WEB-INF/web.xml" token="r_installed_value" value="${r_installed}" />
    <replace file="${build.dir}/WEB-INF/web.xml" token="db_host__value" value="${db.host}" summary="yes" />
    <replace file="${build.dir}/WEB-INF/web.xml" token="db_name__value" value="${db.name}" summary="yes" />
    <replace file="${build.dir}/WEB-INF/web.xml" token="db_user__value" value="${db.user}" summary="yes" />
    <replace file="${build.dir}/WEB-INF/web.xml" token="db_password__value" value="${db.password}" summary="yes" />

    <!-- Force copy of build.properties -->
    <copy overwrite="yes" todir="${build.dir}/WEB-INF/classes/org/mskcc/portal/util" file="build.properties" />
    <copy overwrite="yes" todir="${build.dir}/WEB-INF/classes/org/mskcc/cgds/util" file="build.properties" />

    <!-- Force copy of gene_sets.txt -->
    <copy overwrite="yes" todir="${build.dir}/WEB-INF/classes/org/mskcc/portal/util" file="config/gene_sets.txt" />

    <!-- Force copy of antisamy.xml -->
    <copy overwrite="yes" todir="${build.dir}/WEB-INF/classes/" file="${config.dir}/antisamy.xml" />

    <!-- Force Copy eh-cache.xml -->
    <copy overwrite="yes" todir="${build.dir}/WEB-INF/classes" file="${config.dir}/ehcache.xml" />

    <!-- Force Copy log properties -->
    <copy overwrite="yes" todir="${build.dir}/WEB-INF/classes" file="${config.dir}/log4j.properties" />

    <!-- Prepare log4j.properties, based on build.properties -->
    <replace file="${build.dir}/WEB-INF/classes/log4j.properties" token="log.file.path" value="${log.file.path}" />

  </target>

  <!-- ==================== Reload Target =============================== -->
  <!--

      The "reload" target tells the specified Tomcat 4 installation to dynamically
      reload this web application, to reflect changes in the underlying classes or
      the "web.xml" deployment descriptor.

    -->
  <target name="reload" depends="compile" description="Reloads application on servlet container.">
    <reload url="${manager.url}" username="${manager.username}" password="${manager.password}" path="${app.path}" />
  </target>


  <!-- ==================== Remove Target =============================== -->
  <!--

      The "remove" target tells the specified Tomcat 4 installation to dynamically
      remove this web application from service.

      NOTE:  This is the logical opposite of the "install" target.

    -->
  <target name="remove" description="Removes application on servlet container.">
    <remove url="${manager.url}" username="${manager.username}" password="${manager.password}" path="${app.path}" />
  </target>

  <!-- ==================== Test Target ================================= -->
  <target name="test" description="Runs all JUnit Tests">
    <junit printsummary="yes" fork="yes" haltonfailure="no" dir="${basedir}" failureproperty="junit_test_failed">
      <formatter type="brief" usefile="false" />
      <formatter type="xml" />
      <batchtest fork="yes" todir="${junit.dir}">
        <fileset dir="${src.dir}">
          <include name="**/Test*.java" />
        </fileset>
      </batchtest>
      <classpath>
        <path refid="compile.classpath" />
        <pathelement location="${junit.dir}/classes" />
      </classpath>
    </junit>
    <fail if="junit_test_failed" message="One or more JUnit tests failed" />
  </target>

    <target name="test-endo" description="Runs all Endometrial JUnit Tests">
        <junit printsummary="yes" fork="yes" haltonfailure="no" dir="${basedir}" failureproperty="junit_test_failed">
            <formatter type="brief" usefile="false" />
            <formatter type="xml" />
            <batchtest fork="yes" todir="${junit.dir}">
                <fileset dir="${src.dir}">
                    <include name="org/mskcc/endometrial/test/**/Test*.java" />
                </fileset>
            </batchtest>
            <classpath>
                <path refid="compile.classpath" />
                <pathelement location="${junit.dir}/classes" />
            </classpath>
        </junit>
        <fail if="junit_test_failed" message="One or more JUnit tests failed" />
    </target>

  <target description="Inits Database in Preparation for Running JUnit Tests" name="init_db">
     <exec dir="db" executable="mysql">
        <arg value='-u ${db.user}'/>
        <arg value='-p "${db.password}"'/>
        <arg value='${db.name}'/>
        <arg value="&lt; cgds.sql"/>
     </exec>
  </target>

  <target name="check" description="Runs Checkstyle on all source code">
    <checkstyle config="config/coding_standards.xml" failOnViolation="false">
      <formatter type="plain"/>
	  <formatter type="xml" tofile="checkstyle_report.xml"/>
      <classpath refid="compile.classpath" />
      <fileset dir="${src.dir}">
        <include name="**/*.java" />

        <!--  Exclude Java Files Generated by ANTLR -->
        <exclude name="org/mskcc/portal/oncoPrintSpecLanguage/completeOncoPrintSpecASTLexer.java" />
        <exclude name="org/mskcc/portal/oncoPrintSpecLanguage/completeOncoPrintSpecASTwalker.java" />
        <exclude name="org/mskcc/portal/oncoPrintSpecLanguage/completeOncoPrintSpecASTParser.java" />
      </fileset>
    </checkstyle>
  </target>

  <target name="check-validator-code" description="Runs Checkstyle on Validator Package Only">
    <checkstyle config="config/coding_standards.xml">
      <classpath refid="compile.classpath" />
      <fileset dir="${src.dir}">
        <include name="org/mskcc/portal/validator/gene/*.java" />
      </fileset>
    </checkstyle>
  </target>

  <!-- Move Target -->
  <target name="move" description="Moves file to Tomcat Directory for Deployment">
    <copy file="${war.dir}/cgx.war" todir="/Library/Tomcat/Home/webapps/" />
  </target>

  <target name="snapshot" description="Prepares a tar.gz Snapshot for upload to google code"
	depends="clean" >
	<!-- Call hg id to determine the current tag -->
	<exec executable="hg" outputproperty="tag.id">
	        <arg value="id"/>
	        <arg value="-t"/>
    </exec>
	<!-- Make new directory, based on tag # -->
	<mkdir dir="${dist.dir}/cbio_portal_${tag.id}"/>
	<copy todir="${dist.dir}/cbio_portal_${tag.id}">
		<fileset dir=".">
			<exclude name="**/*.log*"/>
			<exclude name="reload.sh"/>
			<exclude name=".classpath"/>
			<exclude name="*.ipr"/>
			<exclude name="*.iws"/>
			<exclude name="build.properties.*"/>
			<exclude name=".settings/"/>
			<exclude name="interim/"/>
			<exclude name="web_sandbox/"/>
			<exclude name="artwork/"/>
			<exclude name=".project"/>
			<exclude name="dist/"/>
		</fileset>
  	</copy>
	<tar destfile="${dist.dir}/cbio_portal_${tag.id}.tar"
	     basedir="${dist.dir}"
	/>
	<gzip destfile="${dist.dir}/cbio_portal_${tag.id}.tar.gz" src="${dist.dir}/cbio_portal_${tag.id}.tar"/>
  </target>

  <target name="targets" description="Describes available ant targets">
    <echo>check - Runs Checkstyle on all source code</echo>
    <echo>check-validator-code - Runs Checkstyle on Validator Package Only</echo>
    <echo>clean - Deletes all build files and starts fresh</echo>
    <echo>compile [default] - Compile all Java source files</echo>
    <echo>install - Installs application to local development servlet container</echo>
    <echo>jar - Creates binary JAR distribution</echo>
    <echo>list - Lists installed applications on servlet container</echo>
    <echo>move - Moves file to Tomcat Directory for Deployment</echo>
    <echo>prepare</echo>
    <echo>reload - Reloads application on servlet container</echo>
    <echo>remove - Removes application on servlet container</echo>
    <echo>targets - Describes available ant targets</echo>
    <echo>test - Runs all JUnit Tests</echo>
    <echo>war - Creates binary WAR distribution</echo>
  </target>
</project>
